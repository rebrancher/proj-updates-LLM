from rich.console import Console
from taskManager import TaskManager
from database import MasterTaskDB
from DisplayManager import DisplayManager

class CLI:
    #init, starts a task_manager instance and a console class?
    def __init__(self, task_manager, db_name):
        self.task_manager = task_manager
        self.master_db = MasterTaskDB(db_name)
        self.display_manager = DisplayManager()
        self.console = Console()

    def run_cli(self):

        while True:
            self.display_manager.clear_screen()
            master_tasks = self.master_db.get_master_tasks()
            self.display_manager.display_master_tasks(master_tasks)
            print("\n")
            #function to get menu input
            #if menu input is a number, select that task
            item_index = self.task_manager.master_task_menu()
            if isinstance(item_index, int):

                master_task_id, _ = self.task_manager.select_from_list(master_tasks, item_index)

                if master_task_id:
                    self.task_manager.add_task_update(master_task_id)
                else:
                    break
            elif item_index == 'c':
                #Saving...

                print("\nGoodbye!\n")
                break
            else:
                continue

if __name__ == "__main__":
    db_name = 'task.db'
    task_manager = TaskManager(db_name)
    cli = CLI(task_manager, db_name)
    cli.run_cli()
from rich.console import Console
from rich.table import Table
from database import MasterTaskDB, TaskUpdateDB, TaskHighlightDB
from rich.prompt import Prompt
from DisplayManager import DisplayManager

class TaskManager:
    def __init__(self, db_name):
        self.master_db = MasterTaskDB(db_name)
        self.updates_db = TaskUpdateDB(db_name)
        self.highlights_db = TaskHighlightDB(db_name)
        self.display_manager = DisplayManager()
        self.console = Console()

    def select_from_list(self, items, item_index):
        while True:
            try:
                if 1 <= item_index <= len(items):
                    selected_item = items[item_index - 1]
                    return selected_item[0], selected_item[1]
                else:
                    print("\nInvalid selection, out of range.")
            except ValueError:
                print("\nInvalid input, please enter a number.")

#Master task Menu code
    def master_task_menu(self):
        response = input("Enter the number of the Master Task, 'c' to cancel, or 'o' for options: ")
        #if response is a number, return the master task id
        #if response is 'c', return None
        #if response is 'o', return 'o'
        try:
            response = int(response)
            return response
        except ValueError:
            if response.lower() == 'c':
                return 'c'
            elif response.lower() == 'o':
                self.master_task_options()
            else:
                return None
            
    def master_task_options(self):
        while True:
            self.display_manager.clear_screen()
            options = {
                "1": "Create a new Master Task",
                "2": "Delete a Master Task",
                "3": "Exit options menu"
            }
            self.display_manager.display_master_tasks(self.master_db.get_master_tasks())
            self.display_manager.options_menu(options, title="Master Task Options")
            selected_option = Prompt.ask("Choose an option: ")
            if selected_option == '1':
                task_name = input("Enter the name of the new Master Task: ")
                self.create_master_task(task_name)
            elif selected_option == '2':
                # You need to define delete_master_task() function
                self.delete_master_task()
                print("Deleting a Master Task...")
                input("Press enter to continue...")
            elif selected_option == '3':
                break
            else:
                continue
# Master Task Code

    def create_master_task(self, task_name):
        self.master_db.create_task(task_name)

    def task_update_menu(self, master_task_id):
        response = input("Enter update (300 characters max), 'c' to cancel, or 'o' for options: ")

        if response.lower() == 'c':
            return 'c'
        elif response.lower() == 'o':
            self.task_update_options(master_task_id)
        else:
            self.updates_db.add_update(master_task_id, response)
            
    def task_update_options(self, master_task_id):
        options = {
                "1": "Delete Update",
                "2": "Add a highlight",
                "3": "Make a group",
                "4": "Exit update mode"
            }

        self.display_manager.options_menu(options, title="Update Menu")
        selected_option = Prompt.ask("Choose an option: ")

        if selected_option == '1':
            # You need to define delete_update() function``
            self.delete_task_update()
            print("Update successfully deleted\n")
        elif selected_option == '2':
            # You need to define add_highlight() function
            self.add_highlight()
            print("Adding a highlight...")
        elif selected_option == '3':
            # You need to define make_group() function
            print("Making a group...")
        elif selected_option == '4':
            task = self.select_from_list(task_updates)

# Updates Code
    def add_task_update(self, master_task_id):
        while True:
            self.display_manager.clear_screen()
            task_updates = self.updates_db.get_updates(master_task_id)
            self.display_manager.display_task_updates(task_updates)
            update = self.task_update_menu(master_task_id)
            if update == 'c':
                break            

        input("Exiting update entry mode. Press enter to continue...")
        return


    def menu_add_update(self, master_task_id):
        ##this part you have to figure out how to get menus out of the function codes
        self.list_updates(master_task_id)
        print("Options:")
        print("1. Add new update")
        print("2. Go back to main menu \n")
        option = input("Choose your option: ")

        if option == '1':
            self.add_task_update(master_task_id)

        elif option == '2':
            return

#Highlights Code
    def add_highlight(self):

        index = input("Enter the number of the update you want to highlight: ")


        colors = [
            "black",
            "red",
            "green",
            "yellow",
            "blue",
            "magenta",
            "cyan",
            "white",
            "bright_black",
            "bright_red",
            "bright_green",
            "bright_yellow",
            "bright_blue",
            "bright_magenta",
            "bright_cyan",
            "bright_white",
            "dim"
        ]

        # Print all color names.
        print("\nPossible colors for highlighting are:")
        for color in colors:
            print(color)
        
        highlight_color = input("\nEnter the color for your highlight: ")
        
        if highlight_color not in colors:
            print("Invalid color. Please try again with a valid color.")
            return
        
        print(index, highlight_color)
        self.updates_db.add_highlight_to_update(index, highlight_color)

    # Function to fetch all highlights of a particular task.
    
    def delete_master_task(self):
        task_id = input("Enter the number of the Master Task to delete: ")
        check = input("Are you sure you want to delete this Master Task? (y/n): ")
        if check == 'y':
            self.master_db.delete_task(task_id)
        else:
            return

    def delete_task_update(self):
        update_id = Prompt.ask("Input #id of task you want to delete")
        self.updates_db.delete_update(update_id)


from rich.console import Console
from rich.table import Table
from rich.text import Text
from rich.align import Align
import os
from database import MasterTaskDB, TaskUpdateDB, TaskHighlightDB


class DisplayManager:
    def __init__(self):
        self.console = Console()

    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')

    def options_menu(self, options, title="Options Menu"):
        # options: A dictionary where keys are the option numbers/letters and values are the option descriptions.
        # title: The title to display at the top of the menu.

        menu_table = Table(title=title, show_header=False, header_style="bold blue")
        menu_table.add_column("Menu Options", justify="left", style="cyan")
        
        for option, description in options.items():
            menu_table.add_row(f"{option}) {description}")

        self.console.print(menu_table)

    def display_updates_menu(self):
        menu = Table(title="Updates Menu", show_header=False, header_style="bold blue")
        menu.add_column("Menu Options", justify="left", style="cyan")
        menu.add_row("1) Add Task Update")
        menu.add_row("2) Add Highlight")
        menu.add_row("3) Main Menu")
        self.console.print(menu)

    def display_master_tasks(self, master_tasks):
        tasks = master_tasks
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Task ID", style="dim", width=8)
        table.add_column("Master Task", style="dim", width=40)

        for task in tasks:
            table.add_row(str(task[0]), task[1])


        self.console.print(table)

    def display_task_updates(self, task_updates):
        # Group updates by date
        updates_by_date = {}
        for update in task_updates:
            update_id, _, date, time, text, highlight = update
            if date in updates_by_date:
                updates_by_date[date].append((update_id, time, text, highlight))
            else:
                updates_by_date[date] = [(update_id, time, text, highlight)]

        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Index", style="dim", width=6, justify="center")
        table.add_column("Date", width=12, justify="center")
        table.add_column("Time", style="dim", width=12, justify="center")
        table.add_column("Update", width=60)

        # Display updates
        for date, updates_on_date in updates_by_date.items():
            table.add_row("------", date, "------------", "-"*60)  # Add a row for the date
            for update in updates_on_date:
                update_id, time, text, highlight = update
                if highlight:
                    rich_text = Text.from_markup(f"[{highlight}]{text}[/]")
                    text = rich_text
                table.add_row(str(update_id), "", time, text)
                table.add_row("")
                
        self.console.print(table)

    def display_highlights(self, task_highlights):
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Highlight ID", style="dim", width=10)
        table.add_column("Highlight Text", style="dim", width=40)
        table.add_column("Highlight Color", style="dim", width=10)

        for highlight in task_highlights:
            highlight_id, highlight_text, highlight_color = highlight
            table.add_row(str(highlight_id), highlight_text, highlight_color)

        self.console.print(table)
