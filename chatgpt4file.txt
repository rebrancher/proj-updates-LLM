from rich.console import Console
from taskManager import TaskManager
from database import MasterTaskDB, TaskUpdateDB, TaskHighlightDB
from DisplayManager import DisplayManager

class CLI:
    #init, starts a task_manager instance and a console class?
    def __init__(self, task_manager, db_name):
        self.task_manager = task_manager
        self.master_db = MasterTaskDB(db_name)
        self.updates_db = TaskUpdateDB(db_name)
        self.highlights_db = TaskHighlightDB(db_name)
        self.display_manager = DisplayManager()
        self.console = Console()

    def run_cli(self):

        while True:
            self.display_manager.clear_screen()
            master_tasks = self.master_db.get_master_tasks()
            self.display_manager.display_master_tasks(master_tasks)
            print("\n")
            master_task_id, _ = self.task_manager.select_from_list(master_tasks)

            if master_task_id:
                self.task_manager.add_task_update(master_task_id)
            else:
                break


if __name__ == "__main__":
    db_name = 'task.db'
    task_manager = TaskManager(db_name)
    cli = CLI(task_manager, db_name)
    cli.run_cli()
import sqlite3
from datetime import datetime

class Database:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()

    def view_table(self, table_name):
        c = self.cursor.execute(f"SELECT * FROM {table_name}")
        for row in c.fetchall(): 
            print(row)
        #return self.cursor.fetchall()

class MasterTaskDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS master_tasks(
                task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_name TEXT NOT NULL
            );
        """)

    def create_task(self, task_name):
        self.cursor.execute("""
            INSERT INTO master_tasks (task_name) VALUES (?);
        """, (task_name,))
        self.conn.commit()

    def get_master_tasks(self):
        self.cursor.execute("""
            SELECT * FROM master_tasks;
        """)
        return self.cursor.fetchall()
    
    def view_table(self):
        print("master_tasks")
        return super().view_table("master_tasks")
    
    def delete_task(self, task_id):
        self.cursor.execute("""
            DELETE FROM master_tasks WHERE task_id = ?;
        """, (task_id,))
        self.conn.commit()
    
    
        

class TaskUpdateDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS task_updates(
                update_id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id INTEGER,
                update_date TEXT NOT NULL,
                update_time TEXT NOT NULL,
                update_text TEXT NOT NULL,
                highlight TEXT,
                FOREIGN KEY (task_id) REFERENCES master_tasks (task_id)
            );
        """)

    def add_update(self, task_id, update_text, highlight=None):
        date_str = datetime.now().strftime("%m-%d-%Y")
        time_str = datetime.now().strftime("%H:%M:%S")
        self.cursor.execute("""
            INSERT INTO task_updates (task_id, update_date, update_time, update_text, highlight) 
            VALUES (?, ?, ?, ?, ?);
        """, (task_id, date_str, time_str, update_text, highlight))
        self.conn.commit()

    #change this to list_updates
    def get_updates(self, master_task_id):
        self.cursor.execute("""
            SELECT update_id, task_id, update_date, update_time, update_text, highlight FROM task_updates 
            WHERE task_id = ? 
            ORDER BY update_date ASC, update_time ASC;
        """, (master_task_id,))
        return self.cursor.fetchall()
    
    def add_highlight_to_update(self, task_id, highlight):
        self.cursor.execute("""
            UPDATE task_updates
            SET highlight = ?
            where update_id = ?;
        """, (highlight, task_id))
        self.conn.commit()
    
    def view_table(self):
        print("task_updates")
        return super().view_table("task_updates")
    
    def delete_update(self, update_id):
        self.cursor.execute("""
            DELETE FROM task_updates WHERE update_id = ?;
        """, (update_id,))
        self.conn.commit()
    
    # TaskHighlightDB inherits from the Database class.

    #not sure if this is ever used or is necessary
class TaskHighlightDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)
        # SQL command to create a new table "task_highlights" in the database,
        # if it does not already exist.
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS task_highlights(
                highlight_id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id INTEGER,
                highlight_text TEXT NOT NULL,
                highlight_color TEXT NOT NULL,
                FOREIGN KEY (task_id) REFERENCES master_tasks (task_id)
            );
        """)

    # Function to add a new highlight to the database.
    def add_highlight(self, task_id, highlight_text, highlight_color):
        self.cursor.execute("""
            INSERT INTO task_highlights (task_id, highlight_text, highlight_color) 
            VALUES (?, ?, ?);
        """, (task_id, highlight_text, highlight_color))
        self.conn.commit()  # Save the changes to the database.

    # Function to fetch all highlights associated with a particular task from the database.
    def get_highlights(self, task_id):
        self.cursor.execute("""
            SELECT highlight_text, highlight_color FROM task_highlights 
            WHERE task_id = ?;
        """, (task_id,))
        return self.cursor.fetchall()  # Return all rows fetched from the database.
    
    def view_table(self):
        print("task_highlights")
        return super().view_table("task_highlights")


from rich.console import Console
from rich.table import Table
from database import MasterTaskDB, TaskUpdateDB, TaskHighlightDB
from rich.prompt import Prompt
from DisplayManager import DisplayManager

class TaskManager:
    def __init__(self, db_name):
        self.master_db = MasterTaskDB(db_name)
        self.updates_db = TaskUpdateDB(db_name)
        self.highlights_db = TaskHighlightDB(db_name)
        self.display_manager = DisplayManager()
        self.console = Console()

    def select_from_list(self, items):
        while True:
            try:
                item_index = input("Please enter the number of the item you want to select, press c to cancel: ")
                if item_index.lower() == 'c':
                    return None, None
                item_index = int(item_index)
                if 1 <= item_index <= len(items):
                    selected_item = items[item_index - 1]
                    return selected_item[0], selected_item[1]
                else:
                    print("\nInvalid selection.")
            except ValueError:
                print("\nInvalid input, please enter a number.")


# Master Task Code

    def create_master_task(self, task_name):
        self.master_db.create_task(task_name)

# Updates Code
    def add_task_update(self, master_task_id):
        while True:
            self.display_manager.clear_screen()
            task_updates = self.updates_db.get_updates(master_task_id)
            self.display_manager.display_task_updates(task_updates)
            
            # Define menu options
            options = {
                "1": "Update text",
                "2": "Add a highlight",
                "3": "Make a group",
                "4": "Exit update mode"
            }

            self.display_manager.options_menu(options, title="Update Menu")


            # Ask for user choice
            selected_option = Prompt.ask("Choose an option: ")

            if selected_option == '1':
                update_text = input("Enter your task update (max 300 chars), press 'c' to cancel: ")
                print("")
                if update_text.lower() == 'c':
                    break
                self.updates_db.add_update(master_task_id, update_text, highlight=None)
                print("Update successfully added\n")
            elif selected_option == '2':
                # You need to define add_highlight() function
                print("Adding a highlight...")
            elif selected_option == '3':
                # You need to define make_group() function
                print("Making a group...")
            elif selected_option == '4':
                task = self.select_from_list(task_updates)


        print("Exited update entry mode.")


    def menu_add_update(self, master_task_id):
        ##this part you have to figure out how to get menus out of the function codes
        self.list_updates(master_task_id)
        print("Options:")
        print("1. Add new update")
        print("2. Go back to main menu \n")
        option = input("Choose your option: ")

        if option == '1':
            self.add_task_update(master_task_id)

        elif option == '2':
            return

#Highlights Code
    def add_highlight(self, master_task_id):
        if master_task_id:
            items = self.updates_db.get_updates(master_task_id)
            index, text = self.select_from_list(items)
            if not index:
                return
        else:
            return

        colors = [
            "black",
            "red",
            "green",
            "yellow",
            "blue",
            "magenta",
            "cyan",
            "white",
            "bright_black",
            "bright_red",
            "bright_green",
            "bright_yellow",
            "bright_blue",
            "bright_magenta",
            "bright_cyan",
            "bright_white",
            "dim"
        ]

        # Print all color names.
        print("\nPossible colors for highlighting are:")
        for color in colors:
            print(color)
        
        highlight_color = input("\nEnter the color for your highlight: ")
        
        if highlight_color not in colors:
            print("Invalid color. Please try again with a valid color.")
            return
        
        print(index, master_task_id, highlight_color)
        self.updates_db.add_highlight_to_update(index, highlight_color)

    # Function to fetch all highlights of a particular task.
    
    def delete_master_task(self, task_id):
        self.master_db.delete_task(task_id)

    def delete_task_update(self, update_id):
        self.updates_db.delete_update(update_id)


from rich.console import Console
from rich.table import Table
from rich.text import Text
from rich.align import Align
import os
from database import MasterTaskDB, TaskUpdateDB, TaskHighlightDB


class DisplayManager:
    def __init__(self):
        self.console = Console()

    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')

    def options_menu(self, options, title="Options Menu"):
        # options: A dictionary where keys are the option numbers/letters and values are the option descriptions.
        # title: The title to display at the top of the menu.

        menu_table = Table(title=title, show_header=False, header_style="bold blue")
        menu_table.add_column("Menu Options", justify="left", style="cyan")
        
        for option, description in options.items():
            menu_table.add_row(f"{option}) {description}")

        self.console.print(menu_table)

    def display_updates_menu(self):
        menu = Table(title="Updates Menu", show_header=False, header_style="bold blue")
        menu.add_column("Menu Options", justify="left", style="cyan")
        menu.add_row("1) Add Task Update")
        menu.add_row("2) Add Highlight")
        menu.add_row("3) Main Menu")
        self.console.print(menu)

    def display_master_tasks(self, master_tasks):
        tasks = master_tasks
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Task ID", style="dim", width=8)
        table.add_column("Master Task", style="dim", width=40)

        for i, task in enumerate(tasks, start=1):
            table.add_row(Align.center(str(i)), task[1])


        self.console.print(table)

    def display_task_updates(self, task_updates):
        # Group updates by date
        updates_by_date = {}
        for update in task_updates:
            _, _, date, time, text, highlight = update
            if date in updates_by_date:
                updates_by_date[date].append((time, text, highlight))
            else:
                updates_by_date[date] = [(time, text, highlight)]

        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Index", style="dim", width=6, justify="center")
        table.add_column("Date", width=12, justify="center")
        table.add_column("Time", style="dim", width=12, justify="center")
        table.add_column("Update", width=60)

        # Display updates
        index = 1
        for date, updates_on_date in updates_by_date.items():
            table.add_row("------", date, "------------", "-"*60)  # Add a row for the date
            for update in updates_on_date:
                time, text, highlight = update
                if highlight:
                    rich_text = Text.from_markup(f"[{highlight}]{text}[/]")
                    text = rich_text
                table.add_row(str(index), "", time, text)
                table.add_row("")
                index += 1
                
        self.console.print(table)

    def display_highlights(self, task_highlights):
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Highlight ID", style="dim", width=10)
        table.add_column("Highlight Text", style="dim", width=40)
        table.add_column("Highlight Color", style="dim", width=10)

        for highlight in task_highlights:
            highlight_id, highlight_text, highlight_color = highlight
            table.add_row(str(highlight_id), highlight_text, highlight_color)

        self.console.print(table)
