
displaymanager.py
from rich.console import Console
from rich.table import Table
from rich.text import Text
from rich.align import Align
import os
from database import MasterTaskDB, TaskUpdateDB, TaskHighlightDB

## I think that to change this you have to make it only manage displays
## right now there is some logic involved here, which is not good
class DisplayManager:
    def __init__(self):
        self.console = Console()

    def display_table(self, title, header_style, columns, data):
        table = Table(show_header=True, header_style=header_style)
        
        for header, style, width in columns.values():
            table.add_column(header, style=style, width=width)

        for row in data:
            table.add_row(*row)

        self.console.print(table)

    def clearScreen(self):
        os.system('cls' if os.name == 'nt' else 'clear')

    def displayTimestreams(self, master_tasks):
        columns = {
            "1": ["Task_ID","dim", 10],
            "2": ["Master Task","dim", 40]
        }
        self.display_table("Master Tasks", "bold magenta", columns, master_tasks)

    def optionsMenu(self, options):
        # options: A dictionary where keys are the option numbers/letters and values are the option descriptions.
        # title: The title to display at the top of the menu.

        menu = Table(title="Options Menu", show_header=False, header_style="bold blue")
        menu.add_column("Menu Options", justify="left", style="cyan")
        
        for option, description in options.items():
            menu.add_row(f"{option}) {description[0]}", style=description[1])

        self.console.print(menu)
    

    def display_update_details(self, master_task_id, update):
        update_id, _, date, time, text, highlight = update
        update_text = Text(text)
        if highlight:
            update_text.stylize("bold magenta")
        else:
            update_text.stylize("dim")
        update_table = Table(title="Update Details", show_header=False, header_style="bold blue")
        update_table.add_column("Update Details", justify="left", style="cyan")
        update_table.add_row(f"Master Task ID: {master_task_id}")
        update_table.add_row(f"Update ID: {update_id}")
        update_table.add_row(f"Date: {date}")
        update_table.add_row(f"Time: {time}")
        update_table.add_row(f"Update: {update_text}")
        self.console.print(update_table)

    

    def displayUpdates(self, task_updates):
        # Group updates by date
        updates_by_date = {}
        for update in task_updates:
            update_id, _, date, time, text, highlight = update
            if date in updates_by_date:
                updates_by_date[date].append((update_id, time, text, highlight))
            else:
                updates_by_date[date] = [(update_id, time, text, highlight)]

        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Index", style="dim", width=6, justify="center")
        table.add_column("Date", width=12, justify="center")
        table.add_column("Time", style="dim", width=12, justify="center")
        table.add_column("Update", width=60)

        # Display updates
        for date, updates_on_date in updates_by_date.items():
            table.add_row("------", date, "------------", "-"*60)  # Add a row for the date
            for update in updates_on_date:
                update_id, time, text, highlight = update
                if highlight:
                    rich_text = Text.from_markup(f"[{highlight}]{text}[/]")
                    text = rich_text
                table.add_row(str(update_id), "", time, text)
                table.add_row("")
                
        self.console.print(table)
    
    def displayUpdatesWithMasterTaskIDAndName(self, updates):
        # Group updates by date
        updatesByTimestream = {}
        for update in updates:
            update_id, timestreamID, master_name, date, time, text, highlight = update
            if timestreamID in updatesByTimestream:
                updatesByTimestream[timestreamID].append(update_id, timestreamID, master_name, date, time, text, highlight)
            else:
                updatesByTimestream[timestreamID] = [(update_id, timestreamID, master_name, date, time, text, highlight)]

        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Index", style="dim", width=6, justify="center")
        table.add_column("Date", width=12, justify="center")
        table.add_column("TS ID", width=5)
        table.add_column("TS Name", width=15)
        table.add_column("Time", style="dim", width=12, justify="center")
        table.add_column("Update", width=60)
        

        # Display updates
        for timestreamID, updatesByTimestream in updatesByTimestream.items():
            table.add_row("------", date, "-"*5, "-"*15, "----------"*60, "----------------------------------------")
            for update in updatesByTimestream:
                update_id, timestreamID, master_name, date, time, text, highlight = update
                if highlight:
                    rich_text = Text.from_markup(f"[{highlight}]{text}[/]")
                    text = rich_text
                table.add_row(str(update_id), "" , str(timestreamID), master_name, time, text)
                table.add_row("")

        self.console.print(table)

    def display_highlights(self, task_highlights):
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Highlight ID", style="dim", width=10)
        table.add_column("Highlight Text", style="dim", width=40)
        table.add_column("Highlight Color", style="dim", width=10)

        for highlight in task_highlights:
            highlight_id, highlight_text, highlight_color = highlight
            table.add_row(str(highlight_id), highlight_text, highlight_color)

        self.console.print(table)

    def display_groups(self, groups):
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Group ID", style="dim", width=10)
        table.add_column("Group Name", style="dim", width=40)

        for group in groups:
            group_id, group_name = group
            table.add_row(str(group_id), group_name)

        self.console.print(table)

    def display_group_updates(self, group_updates):
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Task ID", style="dim", width=10)
        table.add_column("Task Name", style="dim", width=40)

        for task in group_updates:
            task_id, task_name = task
            table.add_row(str(task_id), task_name)

        self.console.print(table)
database.py
import sqlite3
from datetime import datetime
from datetime import date
from datetime import timedelta

class Database:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()

    def view_table(self, table_name):
        c = self.cursor.execute(f"SELECT * FROM {table_name}")
        for row in c.fetchall(): 
            print(row)
        #return self.cursor.fetchall()

class MasterTaskDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS master_tasks(
                task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_name TEXT NOT NULL
            );
        """)
    
    def getTimestream(self, timestreamID):
        self.cursor.execute("""
            SELECT * FROM master_tasks WHERE task_id = ?;
        """, (timestreamID,))
    
    def getTimestreamName(self, timestreamID):
        self.cursor.execute("""
            SELECT task_name FROM master_tasks WHERE task_id = ?;
        """, (timestreamID,))
        return self.cursor.fetchone()[0]

    def create_task(self, task_name):
        self.cursor.execute("""
            INSERT INTO master_tasks (task_name) VALUES (?);
        """, (task_name,))
        self.conn.commit()

    def get_master_tasks(self):
        self.cursor.execute("""
            SELECT * FROM master_tasks;
        """)
        return self.cursor.fetchall()

    def getAllTimestreams(self):
        self.cursor.execute("""
        SELECT CAST(task_id AS TEXT), task_name FROM master_tasks;
        """)
        return self.cursor.fetchall()
    
    def view_table(self):
        print("master_tasks")
        return super().view_table("master_tasks")
    
    def delete_task(self, task_id):
        self.cursor.execute("""
            DELETE FROM master_tasks WHERE task_id = ?;
        """, (task_id,))
        self.conn.commit()
    
    
        

class TaskUpdateDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS task_updates(
                update_id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id INTEGER,
                update_date TEXT NOT NULL,
                update_time TEXT NOT NULL,
                update_text TEXT NOT NULL,
                highlight TEXT,
                FOREIGN KEY (task_id) REFERENCES master_tasks (task_id)
            );
        """)

    def add_update(self, task_id, update_text, highlight=None):
        date_str = datetime.now().strftime("%m-%d-%Y")
        time_str = datetime.now().strftime("%H:%M:%S")
        self.cursor.execute("""
            INSERT INTO task_updates (task_id, update_date, update_time, update_text, highlight) 
            VALUES (?, ?, ?, ?, ?);
        """, (task_id, date_str, time_str, update_text, highlight))
        self.conn.commit()

    #change this to list_updates
    def getUpdates(self, master_task_id):
        self.cursor.execute("""
            SELECT update_id, task_id, update_date, update_time, update_text, highlight FROM task_updates 
            WHERE task_id = ? 
            ORDER BY update_date ASC, update_time ASC;
        """, (master_task_id,))
        return self.cursor.fetchall()

    #write function to get updates from yesterday 12:01am to now
    def getUpdatesSinceYesterdayMidnight(self, master_task_id):
        yesterday_date_str = (datetime.now() - timedelta(days=1)).strftime("%m-%d-%Y")
        self.cursor.execute("""
            SELECT update_id, task_id, update_date, update_time, update_text, highlight FROM task_updates 
            WHERE task_id = ? AND update_date >= ? 
            ORDER BY update_date ASC, update_time ASC;
        """, (master_task_id, yesterday_date_str))
        return self.cursor.fetchall() 
    
    def getAllUpdatesSinceYesterdayMidnight(self):
        yesterday_date_str = (datetime.now() - timedelta(days=1)).strftime("%m-%d-%Y")
        self.cursor.execute("""
            SELECT update_id, task_id, update_date, update_time, update_text, highlight FROM task_updates
            WHERE update_date >= ?
            ORDER BY update_date ASC, update_time ASC;
        """, (yesterday_date_str,))
        return self.cursor.fetchall()

    def getAllUpdatesSinceYesterdayMidnightJoinMasterDBName(self):
        yesterday_date_str = (datetime.now() - timedelta(days=1)).strftime("%m-%d-%Y")
        self.cursor.execute("""
            SELECT task_updates.update_id, task_updates.task_id, master_tasks.task_name, task_updates.update_date, task_updates.update_time, task_updates.update_text, task_updates.highlight FROM task_updates
            JOIN master_tasks ON task_updates.task_id = master_tasks.task_id
            WHERE update_date >= ?
            ORDER BY update_date ASC, update_time ASC;
        """, (yesterday_date_str,))
        return self.cursor.fetchall()
    




    
    def get_update(self, master_task_id, update_id):
        self.cursor.execute("""
            SELECT update_id, task_id, update_date, update_time, update_text, highlight FROM task_updates 
            WHERE task_id = ? AND update_id = ?;
        """, (master_task_id, update_id))
        return self.cursor.fetchone()
    
    def add_highlight_to_update(self, task_id, highlight):
        self.cursor.execute("""
            UPDATE task_updates
            SET highlight = ?
            where update_id = ?;
        """, (highlight, task_id))
        self.conn.commit()
    
    def view_table(self):
        print("task_updates")
        return super().view_table("task_updates")
    
    def delete_update(self, update_id):
        self.cursor.execute("""
            DELETE FROM task_updates WHERE update_id = ?;
        """, (update_id,))
        self.conn.commit()
    
    # TaskHighlightDB inherits from the Database class.

    #not sure if this is ever used or is necessary
class TaskHighlightDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)
        # SQL command to create a new table "task_highlights" in the database,
        # if it does not already exist.
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS task_highlights(
                highlight_id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id INTEGER,
                highlight_text TEXT NOT NULL,
                highlight_color TEXT NOT NULL,
                FOREIGN KEY (task_id) REFERENCES master_tasks (task_id)
            );
        """)

    # Function to add a new highlight to the database.
    def add_highlight(self, task_id, highlight_text, highlight_color):
        self.cursor.execute("""
            INSERT INTO task_highlights (task_id, highlight_text, highlight_color) 
            VALUES (?, ?, ?);
        """, (task_id, highlight_text, highlight_color))
        self.conn.commit()  # Save the changes to the database.

    # Function to fetch all highlights associated with a particular task from the database.
    def get_highlights(self, task_id):
        self.cursor.execute("""
            SELECT highlight_text, highlight_color FROM task_highlights 
            WHERE task_id = ?;
        """, (task_id,))
        return self.cursor.fetchall()  # Return all rows fetched from the database.
    
    def view_table(self):
        print("task_highlights")
        return super().view_table("task_highlights")

class GroupsDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS task_update_groups (
            group_id INTEGER PRIMARY KEY,
            master_task_id INTEGER,
            group_name TEXT,
            FOREIGN KEY (master_task_id) REFERENCES tasks (id)
            )
        """)
        self.conn.commit()

    def create_group(self, master_task_id, group_name):
        self.cursor.execute("""
            INSERT INTO task_update_groups (
            master_task_id, group_name) VALUES (?, ?)""",
            (master_task_id, group_name))
        self.conn.commit()

    def get_groups(self, master_task_id):
        self.cursor.execute("""
            SELECT group_id, group_name FROM task_update_groups 
            WHERE master_task_id = ?;
        """, (master_task_id,))
        return self.cursor.fetchall()
    

class GroupsLinkDB(Database):
    def __init__(self, db_name):
        super().__init__(db_name)

        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS task_update_links (
            update_id INTEGER,
            group_id INTEGER,
            FOREIGN KEY (update_id) REFERENCES task_updates (id),
            FOREIGN KEY (group_id) REFERENCES task_update_groups (group_id)
            )
        """)    
        self.conn.commit()

    def create_link(self, task_update_id, group_id):
        # Execute the SQL command
        self.cursor.execute("INSERT INTO task_update_links (update_id, group_id) VALUES (?, ?)",
                (task_update_id, group_id))
        # Commit the changes
        self.conn.commit()
        # Close the connection
    
    def get_links(self, group_id):
        self.cursor.execute("""
            SELECT update_id FROM task_update_links 
            WHERE group_id = ?;
        """, (group_id,))
        return self.cursor.fetchall()
    
    def get_updates_from_links(self, group_id):
        self.cursor.execute("""
            SELECT task_updates.update_id, task_updates.task_id, task_updates.update_date, task_updates.update_time, task_updates.update_text, task_updates.highlight FROM task_updates
            INNER JOIN task_update_links ON task_updates.update_id = task_update_links.update_id
            WHERE task_update_links.group_id = ?;
        """, (group_id,))
        return self.cursor.fetchall()

    



